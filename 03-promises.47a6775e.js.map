{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAC5BD,SAASC,cAAc,yBA8BtC,SAASI,EAAcC,EAAUC,GAY/B,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CArCbR,EAAKe,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAaC,OAAO,GAAGhB,EAAWiB,SAClCC,EAAYF,OAAO,GAAGf,EAAUgB,SAChCE,EAAeH,OAAO,GAAGd,EAAYe,SAE3C,IAAIG,EAAeL,EAEnB,IAAK,IAAIM,EAAI,EAAGA,EAAIF,EAAcE,GAAK,EACrClB,EAAckB,EAAI,EAAGD,GAClBE,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBrB,QAAiBC,MAAU,IAGnDqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBvB,QAAeC,MAAU,IAGnDe,GAAgBF,EAGlBrB,EAAK+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst button = document.querySelector('button[type=\"submit\"]');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const firstDelay = Number(`${delayInput.value}`);\n  const stepDelay = Number(`${stepInput.value}`);\n  const promiseCount = Number(`${amountInput.value}`);\n\n  let currentDelay = firstDelay;\n\n  for (let i = 0; i < promiseCount; i += 1) {\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    currentDelay += stepDelay;\n  }\n\n  form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","firstDelay","Number","value","stepDelay","promiseCount","currentDelay","i","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.47a6775e.js.map"}