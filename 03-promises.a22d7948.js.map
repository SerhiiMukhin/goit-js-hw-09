{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAC5BD,SAASC,cAAc,yBA8BtC,SAASI,EAAcC,EAAUC,GAY/B,OAXgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IArCPR,EAAKe,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAON,IANA,IAAMC,EAAaC,OAAO,GAAoBC,OAAjBjB,EAAWkB,QAClCC,EAAYH,OAAO,GAAmBC,OAAhBhB,EAAUiB,QAChCE,EAAeJ,OAAO,GAAqBC,OAAlBf,EAAYgB,QAEvCG,EAAeN,EAEVO,EAAI,EAAGA,EAAIF,EAAcE,GAAK,EACrCnB,EAAcmB,EAAI,EAAGD,GAClBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCV,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAGjDuB,OAAM,SAAAJ,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA9B,GAAS+B,OAAOG,QACd,sBAAqCZ,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAGjDgB,GAAgBF,EAGlBtB,EAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst button = document.querySelector('button[type=\"submit\"]');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const firstDelay = Number(`${delayInput.value}`);\n  const stepDelay = Number(`${stepInput.value}`);\n  const promiseCount = Number(`${amountInput.value}`);\n\n  let currentDelay = firstDelay;\n\n  for (let i = 0; i < promiseCount; i += 1) {\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    currentDelay += stepDelay;\n  }\n\n  form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","firstDelay","Number","concat","value","stepDelay","promiseCount","currentDelay","i","then","param","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.a22d7948.js.map"}